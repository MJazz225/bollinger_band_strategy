#########################################################################
#
# made by Marshaw
#
# excel的起始日期是1899-12-30
#
# 开始日期：15-02-2024
# 现货量化交易策略
# 布林通道
#
#######################################################################

rm(list=ls())

library(readxl)
library(dplyr)
library(openxlsx)
library(tidyr)
if (!requireNamespace("zoo")){install.packages("zoo")}
library(zoo)
library(TTR)
library(zoo)

####################################################################################################################################################################################
initial_margin <- 1000000
trading_volume <- 1 #以USDT为基准
MA_length <- 30
multi <- 2.0 #标准差乘数

####################################################################################################################################################################################
rawdata <- read.csv('Downloads/BTCUSDT_Binance_futures_UM_hour.csv', sep = ',', header = T, skip = 1)
rawdata <- rawdata[nrow(rawdata):1,]
data1 <- rawdata[rawdata$Date > '2023-01-01 00:00:00',]
#data1 <- rawdata
data1 <- data1[,c(1:7)]

################################ 布林通道 ####################################################################################################################################################

##布林带
data1$EMA <- EMA(data1$Close, n = MA_length) #basis
data1$sd <- rollapply(data1$Close, width = MA_length, FUN = sd, align = "right", fill = NA) 
data1$upper <- data1$EMA + data1$sd*multi #sd*multi 上通道
data1$lower <- data1$EMA - data1$sd*multi #sd*multi 下通道
  
'tradingview程式码
basis = ta.ema(close, length)
dev = mult * ta.stdev(close, length)
upper = basis + dev
lower = basis - dev
'

data2 <- na.omit(data1)
data2 <- data2[(nrow(data2)-24*7):nrow(data2),]
library(ggplot2)

################################ 画图 ####################################################################################################################################################

# 创建折线图，手动指定分组
p <- ggplot(data2, aes(x = Date)) +
  geom_line(aes(y = Close, group = 1, color = "Close")) +
  geom_line(aes(y = EMA, group = 2, color = "EMA")) +
  geom_line(aes(y = upper, group = 3, color = "Upper Bollinger Band")) +
  geom_line(aes(y = lower, group = 4, color = "Lower Bollinger Band")) +
  labs(x = "Hour", y = "Value") +  # 移除图例
  scale_color_manual(values = c("Close" = "black", "EMA" = "red", "Upper Bollinger Band" = "blue", "Lower Bollinger Band" = "blue")) +
  theme_minimal() +  # 使用最小化主题
  theme(legend.position = "none",  # 隐藏图例
        axis.title = element_blank(),  # 隐藏坐标轴标题
        axis.text = element_blank(),   # 隐藏坐标轴文本
        axis.line = element_blank(),   # 隐藏坐标轴线
        axis.ticks = element_blank())  # 隐藏坐标轴刻度线

print(p)
################################ 定义进出场 ####################################################################################################################################################
#进场
data1 <- na.omit(data1)
data1$entry <- numeric(nrow(data1))
# 创建进场条件，使用 crossovers 来定义
for (i in 2:nrow(data1)) {
  cat(i, '/', nrow(data1) , '\n')
  if (data1$Close[i] > data1$upper[i] & data1$Close[i - 1] <= data1$upper[i - 1]) {
    data1$entry[i] <- 1
  }
}

data1$stop_loss <- ifelse(data1$entry == 1, data1$lower,0)

data1$tp1_3multi <- ifelse(data1$entry == 1, 3 * data1$sd + data1$upper ,0)  #3倍标准差 * 上通道
data1$tp2_5multi <- ifelse(data1$entry == 1, 5 * data1$sd + data1$upper ,0)  #5倍标准差 * 上通道
data1$tp3_10multi <-  ifelse(data1$entry == 1, 10 * data1$sd + data1$upper ,0)  #10倍标准差 * 上通道

write.csv(data1, "Downloads/data1.csv")

################################ 计算PNL ####################################################################################################################################################
# 初始化一个空的结果向量
results <- vector("list", length = nrow(data1))
names(results) <- rownames(data1)
tem <- NULL
row <- NULL
tem1 <- NULL
# 遍历数据
for (i in 1:nrow(data1)) {
  if (data1$entry[i] == 1) {
    stop_loss <- data1$stop_loss[i]
    tp1 <- data1$tp1_3multi[i]
    
    for (j in (i+1):nrow(data1)) {
      # 检查是否触及止损或止盈
      if (data1$Low[j] <= stop_loss || data1$High[j] >= tp1) {
        # 判断是触及止损还是止盈，并只添加一次结果
        if (data1$Low[j] <= stop_loss) {
          row <- i
          tem1 <- cbind(row, -1)
          tem <- rbind(tem, tem1) # 触及止损
        } else if (data1$High[j] >= tp1) {
          row <- i
          tem1 <- cbind(row, 1)
          tem <- rbind(tem, tem1) # 触及止盈
        }
        break # 退出内层循环
      }
    }
  }
}##bug 找到1，-1值，还没找到行数, 找到的exit行数出错，导致data1$exit没有正确资料

#######################
#
# exit和entry的次数可能算错了
#
#
#######################

# 根据results_df中的exit_row更新原始数据集的exit字段
for (i in 1:nrow(tem)) {
  cat(i, '/', nrow(tem),'\n')
  
  tem_row <- tem[i,1] %>% as.numeric
  tem_value <- tem[i,2] %>% as.numeric
  data1[tem_row,'exit'] <-  tem_value
}


PNL_data <- data1[data1$entry == 1 | data1$exit == 1,]
PNL_data_with_only_tp1 <- PNL_data[,c(-15,-16)]

entry_data <-  PNL_data_with_only_tp1[PNL_data_with_only_tp1$entry == 1,]
exit_data <-   PNL_data_with_only_tp1[PNL_data_with_only_tp1$exit == 1,]
entry_data <- entry_data[c(1:190),]

PNL_data1_with_only_tp1 <- rbind(entry_data, exit_data)
PNL_data1_with_only_tp1 <- PNL_data1_with_only_tp1[order(PNL_data1_with_only_tp1$Date),]

exit_data$PNL <- numeric(nrow(exit_data))
for (i in 1:nrow(entry_data)) {
  cat(i,'/', nrow(entry_data), '\n')
  
  price <- entry_data[i,c('Close', 'stop_loss', "tp1_3multi")]
  exit_tem <- exit_data[i,c('Low', 'High')]
  tem_loss <- ifelse(price[2] > exit_tem[,'Low'] & price[2] < exit_tem[,'High'],1,0)
  tem_profit <- ifelse(price[3] > exit_tem[,'Low'] & price[3] < exit_tem[,'High'],1,0)
  profit <- tem_loss*price[,'stop_loss']*-1+tem_profit*price[,'tp1_3multi']
  exit_data[i,'PNL'] <- profit
}

i=1
price <- entry_data[i,c('Close', 'stop_loss', "tp1_3multi")]
exit_tem <- exit_data[i,c('Low', 'High')]
tem_loss <- ifelse(price[2] > exit_tem[,'Low'] & price[2] < exit_tem[,'High'],1,0)
tem_profit <- ifelse(price[3] > exit_tem[,'Low'] & price[3] < exit_tem[,'High'],1,0)
profit <- tem_loss*price[,'stop_loss']+tem_profit*price[,'tp1_3multi']
exit_data[i,] <- profit












